import numpy as np
import matplotlib.pyplot as plt

#Define parameters
S0 = 100 # Initial stock price
mu = 0.05 # Drift
sigma = 0.2 # Volatility
lambda_ = 0.1 #Jump intensity (avg # of jumps per year)
mu_j = -0.2 # Mean of the jump size
sigma_j = 0.1 # Standard deviation of the jump size
T = 1 # Time to maturity
dt = 1/252 # Time step
N = int(T / dt) # Number of time steps

#Seed for reproducibility
np.random.seed(42)

#Initialize price array
prices = np.zeros(N)
prices[0] = S0

# Simulate the asset price path
for t in range(1, N):
    # Generate the random compnents
    Z = np.random.normal(0, 1)
    J = np.random.norm(mu_j, sigma_j) if np.random.poisson(lambda_ * dt) > 0 else 0

    #Calculate the price
    prices[t] = prices[t-1] * np.exp((mu - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z + J)

#Plot the simulated price path
plt.figure(figsize=(10,6))
plt.plot(prices, label='Simulated Asset Price with Jumps')
plt.xlabel('Time (days)')
plt.ylabel('Asset Price')
plt.title('Simulated Asset Price Path w Poisson Jumps')
plt.legend()
plt.show()
